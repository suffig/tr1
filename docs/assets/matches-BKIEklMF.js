import{s}from"./dataManager-CtWei30S.js";new Date().toISOString().slice(0,10);async function D(n){var d,c;try{if(console.log(`Starting deletion of match ${n}`),!n&&n!==0)throw new Error("No match ID provided for deletion");let r;if(typeof n=="string")r=parseInt(n,10);else if(typeof n=="bigint"){const e=Number(n);BigInt(e)===n?r=e:r=n}else r=n;const R=Number.isInteger(r)&&r>0,z=typeof r=="bigint"&&r>0n;if(!R&&!z)throw new Error("Invalid match ID provided for deletion");const{data:w,error:$}=await s.from("matches").select("date,prizeaek,prizereal,goalslista,goalslistb,manofthematch,yellowa,reda,yellowb,redb").eq("id",r);if($)throw console.error("Error fetching match:",$),$;if(!w||w.length===0){console.warn(`Match with id ${r} not found`);return}const t=w[0];t.date||console.warn(`Match ${r} has no date - this may cause issues with transaction cleanup`),console.log("Deleting match data:",t);const S={financialChanges:[],playerGoalChanges:[],sdsChanges:[]};console.log(`Fetching transactions for match ${r} before deletion`);const{data:G,error:y}=await s.from("transactions").select("team,amount,type").eq("match_id",r);if(y)throw console.error("Error fetching transactions:",y),y;const f=G||[];if(console.log(`Found ${f.length} transactions to reverse:`,f.map(e=>`${e.type}: ${e.amount} (${e.team})`)),console.log(`Reversing financial changes for ${(f==null?void 0:f.length)||0} transactions`),f&&f.length>0)for(const e of f)if(e.type==="Echtgeld-Ausgleich"){const{data:l,error:o}=await s.from("finances").select("debt").eq("team",e.team);if(o){console.error(`Error fetching finances for team ${e.team}:`,o);continue}const a=l&&l.length>0?l[0]:null,h=(a==null?void 0:a.debt)||0;let i=h-e.amount;i<0&&(i=0),S.financialChanges.push({team:e.team,type:"debt",oldValue:h,newValue:i}),await s.from("finances").update({debt:i}).eq("team",e.team)}else{const{data:l,error:o}=await s.from("finances").select("balance").eq("team",e.team);if(o){console.error(`Error fetching finances for team ${e.team}:`,o);continue}const a=l&&l.length>0?l[0]:null,h=(a==null?void 0:a.balance)||0;let i=h-e.amount;i<0&&(i=0),S.financialChanges.push({team:e.team,type:"balance",oldValue:h,newValue:i}),await s.from("finances").update({balance:i}).eq("team",e.team)}if(typeof t.prizeaek=="number"&&t.prizeaek!==0){const{data:e,error:l}=await s.from("finances").select("balance").eq("team","AEK");if(l)console.error("Error fetching AEK finances:",l);else if(e&&e.length>0){const o=e[0];let a=((o==null?void 0:o.balance)||0)-t.prizeaek;a<0&&(a=0),await s.from("finances").update({balance:a}).eq("team","AEK")}}if(typeof t.prizereal=="number"&&t.prizereal!==0){const{data:e,error:l}=await s.from("finances").select("balance").eq("team","Real");if(l)console.error("Error fetching Real finances:",l);else if(e&&e.length>0){const o=e[0];let a=((o==null?void 0:o.balance)||0)-t.prizereal;a<0&&(a=0),await s.from("finances").update({balance:a}).eq("team","Real")}}console.log(`Deleting ${(f==null?void 0:f.length)||0} transactions for match ${r}`);const{error:b}=await s.from("transactions").delete().eq("match_id",r);if(b)throw console.error("Error deleting transactions:",b),b;const{data:g,error:q}=await s.from("transactions").select("id").eq("match_id",r);if(q)console.warn("Could not verify transaction deletion:",q);else{if(g&&g.length>0)throw console.error(`‚ùå Failed to delete ${g.length} transactions for match ${r}`),new Error(`Transaction deletion incomplete: ${g.length} transactions still exist`);console.log(`‚úÖ Successfully deleted all transactions for match ${r}`)}const M=async(e,l)=>{if(!e||!Array.isArray(e))return;const o={};if(e.length>0&&typeof e[0]=="object"&&e[0].player!==void 0)e.forEach(a=>{a.player&&(o[a.player]=(o[a.player]||0)+(a.count||1))});else for(const a of e)a&&(o[a]=(o[a]||0)+1);for(const[a,h]of Object.entries(o)){const{data:i,error:m}=await s.from("players").select("goals").eq("name",a).eq("team",l);if(m){console.error(`Error fetching player ${a} for goal removal:`,m);continue}if(!i||i.length===0){console.warn(`Player ${a} not found in team ${l} for goal removal`);continue}const u=i[0];let p=((u==null?void 0:u.goals)||0)-h;p<0&&(p=0);const{error:A}=await s.from("players").update({goals:p}).eq("name",a).eq("team",l);A?console.error(`Error updating goals for player ${a}:`,A):console.log(`‚úÖ Updated goals for ${a} (${l}): ${u.goals} ‚Üí ${p}`)}};if(await M(t.goalslista,"AEK"),await M(t.goalslistb,"Real"),t.manofthematch){let e=null;const l=(o,a)=>!o||!o.length?!1:typeof o[0]=="object"&&o[0].player!==void 0?o.some(h=>h.player===a):o.includes(a);if(l(t.goalslista,t.manofthematch))e="AEK";else if(l(t.goalslistb,t.manofthematch))e="Real";else{const{data:o,error:a}=await s.from("players").select("team").eq("name",t.manofthematch);a?console.error(`Error fetching player ${t.manofthematch} for team lookup:`,a):o&&o.length>0?e=o[0].team:console.warn(`Player ${t.manofthematch} not found for SdS team determination`)}if(e){const{data:o,error:a}=await s.from("spieler_des_spiels").select("count").eq("name",t.manofthematch).eq("team",e);if(a)console.error(`Error fetching SdS entry for ${t.manofthematch}:`,a);else if(o&&o.length>0){const h=o[0],i=Math.max(0,h.count-1),{error:m}=await s.from("spieler_des_spiels").update({count:i}).eq("name",t.manofthematch).eq("team",e);m?console.error(`Error updating SdS count for ${t.manofthematch}:`,m):console.log(`‚úÖ Updated SdS count for ${t.manofthematch} (${e}): ${h.count} ‚Üí ${i}`)}else console.warn(`SdS entry for ${t.manofthematch} in team ${e} not found`)}}(t.yellowa>0||t.reda>0||t.yellowb>0||t.redb>0)&&console.log(`Match had cards: AEK(${t.yellowa}Y,${t.reda}R) Real(${t.yellowb}Y,${t.redb}R)`),console.log(`Deleting match ${r} from matches table`);const{error:E}=await s.from("matches").delete().eq("id",r);if(E)throw console.error("Error deleting match:",E),E;const{data:v,error:k}=await s.from("matches").select("id").eq("id",r);if(k)console.warn("Could not verify match deletion:",k);else{if(v&&v.length>0)throw console.error(`‚ùå Failed to delete match ${r}`),new Error(`Match deletion failed: match ${r} still exists`);console.log(`‚úÖ Successfully deleted match ${r}`)}console.log(`‚úÖ Successfully deleted match ${r} and all related data`),console.log(`üìã Deletion Summary for Match ${r}:`),console.log("   - Match record: deleted"),console.log(`   - Transactions: ${f.length} deleted`),console.log(`   - Player goals: updated for ${((d=t.goalslista)==null?void 0:d.length)||0} AEK + ${((c=t.goalslistb)==null?void 0:c.length)||0} Real goals`),console.log(`   - Player of the match: ${t.manofthematch?"updated":"none"}`),console.log(`   - Prize money: AEK ${t.prizeaek||0}, Real ${t.prizereal||0} (reversed)`),console.log(`   - Match date: ${t.date}`)}catch(r){throw console.error(`Failed to delete match ${matchId}:`,r),alert(`Fehler beim L√∂schen des Spiels: ${r.message}`),r}}window.showMatchStatistics=function(){if(matches.length===0){alert("üìä Keine Spiele vorhanden f√ºr Statistiken");return}const n={totalMatches:matches.length,aekWins:matches.filter(c=>(c.goalsa||0)>(c.goalsb||0)).length,realWins:matches.filter(c=>(c.goalsb||0)>(c.goalsa||0)).length,draws:matches.filter(c=>(c.goalsa||0)===(c.goalsb||0)).length,totalGoals:matches.reduce((c,r)=>c+(r.goalsa||0)+(r.goalsb||0),0),highestScore:Math.max(...matches.map(c=>Math.max(c.goalsa||0,c.goalsb||0))),averageGoals:0};n.averageGoals=(n.totalGoals/n.totalMatches).toFixed(1);const d=`üèÜ Match-Statistiken:

Gesamt: ${n.totalMatches} Spiele
AEK Siege: ${n.aekWins}
Real Siege: ${n.realWins}
Unentschieden: ${n.draws}

Tore gesamt: ${n.totalGoals}
√ò Tore/Spiel: ${n.averageGoals}
H√∂chstes Ergebnis: ${n.highestScore} Tore`;alert(d)};export{D as deleteMatch};
