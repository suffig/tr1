import{s as l}from"./dataManager-CtWei30S.js";new Date().toISOString().slice(0,10);async function p(o){try{console.log(`Starting deletion of match ${o}`);const{data:e,error:r}=await l.from("matches").select("date,prizeaek,prizereal,goalslista,goalslistb,manofthematch,yellowa,reda,yellowb,redb").eq("id",o).single();if(r)throw console.error("Error fetching match:",r),r;if(!e){console.warn(`Match with id ${o} not found`);return}console.log("Deleting match data:",e),console.log(`Fetching transactions for match ${o} before deletion`);const{data:c,error:i}=await l.from("transactions").select("team,amount,type").in("type",["Preisgeld","Bonus SdS","SdS Bonus","Echtgeld-Ausgleich","Echtgeld-Ausgleich (getilgt)","Strafe"]).eq("match_id",o);if(i)throw console.error("Error fetching transactions:",i),i;if(console.log(`Reversing financial changes for ${(c==null?void 0:c.length)||0} transactions`),c&&c.length>0)for(const a of c)if(a.type==="Echtgeld-Ausgleich"){const{data:n}=await l.from("finances").select("debt").eq("team",a.team).single();let t=((n==null?void 0:n.debt)||0)-a.amount;t<0&&(t=0),await l.from("finances").update({debt:t}).eq("team",a.team)}else{const{data:n}=await l.from("finances").select("balance").eq("team",a.team).single();let t=((n==null?void 0:n.balance)||0)-a.amount;t<0&&(t=0),await l.from("finances").update({balance:t}).eq("team",a.team)}if(typeof e.prizeaek=="number"&&e.prizeaek!==0){const{data:a}=await l.from("finances").select("balance").eq("team","AEK").single();let n=((a==null?void 0:a.balance)||0)-e.prizeaek;n<0&&(n=0),await l.from("finances").update({balance:n}).eq("team","AEK")}if(typeof e.prizereal=="number"&&e.prizereal!==0){const{data:a}=await l.from("finances").select("balance").eq("team","Real").single();let n=((a==null?void 0:a.balance)||0)-e.prizereal;n<0&&(n=0),await l.from("finances").update({balance:n}).eq("team","Real")}console.log(`Deleting ${(c==null?void 0:c.length)||0} transactions for match ${o}`);const{error:f}=await l.from("transactions").delete().in("type",["Preisgeld","Bonus SdS","SdS Bonus","Echtgeld-Ausgleich","Echtgeld-Ausgleich (getilgt)","Strafe"]).eq("match_id",o);if(f)throw console.error("Error deleting transactions:",f),f;const u=async(a,n)=>{if(!a||!Array.isArray(a))return;const t={};if(a.length>0&&typeof a[0]=="object"&&a[0].player!==void 0)a.forEach(s=>{s.player&&(t[s.player]=(t[s.player]||0)+(s.count||1))});else for(const s of a)s&&(t[s]=(t[s]||0)+1);for(const[s,m]of Object.entries(t)){const{data:d}=await l.from("players").select("goals").eq("name",s).eq("team",n).single();let g=((d==null?void 0:d.goals)||0)-m;g<0&&(g=0),await l.from("players").update({goals:g}).eq("name",s).eq("team",n)}};if(await u(e.goalslista,"AEK"),await u(e.goalslistb,"Real"),e.manofthematch){let a=null;const n=(t,s)=>!t||!t.length?!1:typeof t[0]=="object"&&t[0].player!==void 0?t.some(m=>m.player===s):t.includes(s);if(n(e.goalslista,e.manofthematch))a="AEK";else if(n(e.goalslistb,e.manofthematch))a="Real";else{const{data:t}=await l.from("players").select("team").eq("name",e.manofthematch).single();a=t==null?void 0:t.team}if(a){const{data:t}=await l.from("spieler_des_spiels").select("count").eq("name",e.manofthematch).eq("team",a).single();if(t){const s=Math.max(0,t.count-1);await l.from("spieler_des_spiels").update({count:s}).eq("name",e.manofthematch).eq("team",a)}}}(e.yellowa>0||e.reda>0||e.yellowb>0||e.redb>0)&&console.log(`Match had cards: AEK(${e.yellowa}Y,${e.reda}R) Real(${e.yellowb}Y,${e.redb}R)`);const{error:h}=await l.from("matches").delete().eq("id",o);if(h)throw console.error("Error deleting match:",h),h;console.log(`Successfully deleted match ${o} and all related data`)}catch(e){throw console.error(`Failed to delete match ${o}:`,e),alert(`Fehler beim L√∂schen des Spiels: ${e.message}`),e}}window.showMatchStatistics=function(){if(matches.length===0){alert("üìä Keine Spiele vorhanden f√ºr Statistiken");return}const o={totalMatches:matches.length,aekWins:matches.filter(r=>(r.goalsa||0)>(r.goalsb||0)).length,realWins:matches.filter(r=>(r.goalsb||0)>(r.goalsa||0)).length,draws:matches.filter(r=>(r.goalsa||0)===(r.goalsb||0)).length,totalGoals:matches.reduce((r,c)=>r+(c.goalsa||0)+(c.goalsb||0),0),highestScore:Math.max(...matches.map(r=>Math.max(r.goalsa||0,r.goalsb||0))),averageGoals:0};o.averageGoals=(o.totalGoals/o.totalMatches).toFixed(1);const e=`üèÜ Match-Statistiken:

Gesamt: ${o.totalMatches} Spiele
AEK Siege: ${o.aekWins}
Real Siege: ${o.realWins}
Unentschieden: ${o.draws}

Tore gesamt: ${o.totalGoals}
√ò Tore/Spiel: ${o.averageGoals}
H√∂chstes Ergebnis: ${o.highestScore} Tore`;alert(e)};export{p as deleteMatch};
